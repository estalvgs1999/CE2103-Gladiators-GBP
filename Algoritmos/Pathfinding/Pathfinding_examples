
--------------------------------------------------------------------------------------------------------------------------------------------

    8888888b.           888    888       .d888 d8b               888 d8b                         88888888888                888
    888   Y88b          888    888      d88P"  Y8P               888 Y8P                             888                    888
    888    888          888    888      888                      888                                 888                    888
    888   d88P  8888b.  888888 88888b.  888888 888 88888b.   .d88888 888 88888b.   .d88b.            888   .d88b.  .d8888b  888888 .d8888b
    8888888P"      "88b 888    888 "88b 888    888 888 "88b d88" 888 888 888 "88b d88P"88b           888  d8P  Y8b 88K      888    88K
    888        .d888888 888    888  888 888    888 888  888 888  888 888 888  888 888  888           888  88888888 "Y8888b. 888    "Y8888b.
    888        888  888 Y88b.  888  888 888    888 888  888 Y88b 888 888 888  888 Y88b 888           888  Y8b.          X88 Y88b.       X88
    888        "Y888888  "Y888 888  888 888    888 888  888  "Y88888 888 888  888  "Y88888           888   "Y8888   88888P'  "Y888  88888P'
                                                                                       888
                                                                                  Y8b d88P
                                                                                   "Y88P"
--------------------------------------------------------------------------------------------------------------------------------------------

/*
 * Funcion que se encarga de  realizar una prueba al algoritmo Backtracking
 */
int Backtracking_test(){
    // Declarar la matriz que se usara como laberinto
    int (*maze)[10];
    maze = (int(*)[10]) calloc(10,sizeof(*maze));

    // Colocar 3 obstaculos aleatorios
    srand(time(NULL));
    int cnt = 0;
    vector<string> obstaculos;
    while(cnt < 30){

        int x = rand() %10;
        int y = rand() %10;
        if(x!=0 && y!=0){
            maze[x][y]=1;
            cnt++;
        }
    }

    // Mostrar la matriz
    print_maze(maze);

    Backtracking::Backtracking(maze);

    print_maze(maze);
    return 0;
}

// Imprime el laberinto en la consola
void print_maze(int(*maze)[10]){
    for(int row=0;row<10;row++){
      cout<<"{ ";
      for(int col=0;col<10;col++){
        cout<<maze[row][col]<<" ";
      }
      cout<<" }"<<endl;
    }
}
